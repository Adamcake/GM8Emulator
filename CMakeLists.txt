cmake_minimum_required(VERSION 3.7)
project(GM8Emulator)

# it uses globs, remake on pull. it's not that hard.
file(GLOB MiscSource "src/*.cpp")
file(GLOB MiscSourceH "src/*.hpp")

add_executable(GM8Emulator ${MiscSource} ${MiscSourceH})
source_group("Headers" FILES ${MiscSourceH})
source_group("Source" FILES ${MiscSource})

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
add_subdirectory(glfw)
include_directories(glfw/include)
target_link_libraries(GM8Emulator glfw)

find_package(OpenGL REQUIRED)
if(OPENGL_FOUND)
    target_include_directories(GM8Emulator PUBLIC ${OPENGL_INCLUDE_DIR})
    target_link_libraries(GM8Emulator ${OPENGL_gl_LIBRARY})
else()
    message(FATAL_ERROR "Could not find OpenGL!")
endif()

if(MSVC)
    target_include_directories(GM8Emulator PUBLIC "vs_deps/glew/include")
    target_include_directories(GM8Emulator PUBLIC "vs_deps/zlib/include")

    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        target_link_libraries(GM8Emulator "vs_deps/zlib/lib/zlib64")
        target_link_libraries(GM8Emulator "vs_deps/glew/lib/glew64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        target_link_libraries(GM8Emulator "vs_deps/zlib/lib/zlib")
        target_link_libraries(GM8Emulator "vs_deps/glew/lib/glew")
    endif()
else()
    find_package(GLEW REQUIRED)
    if(GLEW_FOUND)
        include_directories(${ZLIB_INCLUDE_DIRS})
        target_link_libraries(GM8Emulator ${ZLIB_LIBRARIES})
    endif()

    find_package(ZLIB REQUIRED)
    if(ZLIB_FOUND)
        include_directories(${ZLIB_INCLUDE_DIRS})
        target_link_libraries(GM8Emulator ${ZLIB_LIBRARIES})
    endif()
endif()
